{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AA0BjD,MAAM,cAAc,GAAG,cAAc,CAAuB,gBAAgB,CAAC,CAAC;AAE9E,eAAe,cAAc,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\r\n\r\nexport interface SecurePasswordPlugin {\r\n    /**\r\n     * Saves a password securely.\r\n     * \r\n     * This method encrypts and stores a password using the specified key.\r\n     * The encryption is handled natively using the platform's secure storage.\r\n     * \r\n     * @param options The options including the key and the password to save.\r\n     * @returns A promise that resolves if the password is saved successfully.\r\n     */\r\n    save(options: { key: string; data: string }): Promise<void>;\r\n\r\n    /**\r\n     * Reads a securely stored password.\r\n     * \r\n     * This method retrieves and decrypts a password associated with the specified key.\r\n     * The decryption is handled natively using the platform's secure storage.\r\n     * \r\n     * @param options The options including the key to retrieve the password for.\r\n     * @returns A promise that resolves with the password, or rejects if not found.\r\n     */\r\n    read(options: { key: string }): Promise<{ value: string }>;\r\n}\r\n\r\nconst SecurePassword = registerPlugin<SecurePasswordPlugin>('SecurePassword');\r\n\r\nexport default SecurePassword;\r\n"]}